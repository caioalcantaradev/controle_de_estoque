#!/usr/bin/env node

/**
 * Script de configura√ß√£o inicial do Sistema de Controle de Estoque CROSBY
 *
 * Este script ajuda na configura√ß√£o inicial do sistema, incluindo:
 * - Cria√ß√£o do usu√°rio administrador
 * - Configura√ß√£o inicial do banco de dados
 * - Teste de conex√£o com TOTVS
 */

const mongoose = require("mongoose");
const bcrypt = require("bcryptjs");
const readline = require("readline");
require("dotenv").config();

const User = require("../models/User");
const logger = require("../config/logger");

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

const question = (query) =>
  new Promise((resolve) => rl.question(query, resolve));

async function connectDB() {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log("‚úÖ Conectado ao MongoDB");
  } catch (error) {
    console.error("‚ùå Erro ao conectar com MongoDB:", error.message);
    process.exit(1);
  }
}

async function createAdminUser() {
  console.log("\nüìù Configura√ß√£o do usu√°rio administrador");

  const nome = await question("Nome completo: ");
  const email = await question("Email: ");
  const password = await question("Senha (m√≠nimo 6 caracteres): ");

  if (password.length < 6) {
    console.log("‚ùå Senha deve ter pelo menos 6 caracteres");
    return await createAdminUser();
  }

  try {
    // Verificar se usu√°rio j√° existe
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      console.log("‚ö†Ô∏è  Usu√°rio j√° existe com este email");
      return;
    }

    // Criar usu√°rio administrador
    const user = new User({
      nome,
      email,
      password,
      role: "admin",
      departamento: "administracao",
      ativo: true,
    });

    await user.save();
    console.log("‚úÖ Usu√°rio administrador criado com sucesso");
  } catch (error) {
    console.error("‚ùå Erro ao criar usu√°rio:", error.message);
  }
}

async function testTotvsConnection() {
  console.log("\nüîó Testando conex√£o com TOTVS MODA");

  const totvsService = require("../services/totvsService");

  try {
    await totvsService.authenticate();
    console.log("‚úÖ Conex√£o com TOTVS estabelecida com sucesso");

    // Testar busca de produtos
    const produtos = await totvsService.buscarProdutos({ limit: 1 });
    console.log(
      `‚úÖ Busca de produtos funcionando (${
        produtos.data?.length || 0
      } produtos encontrados)`
    );
  } catch (error) {
    console.log("‚ö†Ô∏è  Erro na conex√£o com TOTVS:", error.message);
    console.log("   Verifique as configura√ß√µes no arquivo .env");
  }
}

async function checkEnvironment() {
  console.log("\nüîç Verificando configura√ß√µes do ambiente");

  const requiredVars = [
    "MONGODB_URI",
    "JWT_SECRET",
    "TOTVS_BASE_URL",
    "TOTVS_USERNAME",
    "TOTVS_PASSWORD",
  ];

  const missing = requiredVars.filter((varName) => !process.env[varName]);

  if (missing.length > 0) {
    console.log("‚ùå Vari√°veis de ambiente faltando:");
    missing.forEach((varName) => console.log(`   - ${varName}`));
    console.log("\n   Configure essas vari√°veis no arquivo .env");
    return false;
  }

  console.log("‚úÖ Todas as vari√°veis de ambiente configuradas");
  return true;
}

async function createIndexes() {
  console.log("\nüìä Criando √≠ndices do banco de dados");

  try {
    // √çndices para User
    await User.collection.createIndex({ email: 1 }, { unique: true });
    await User.collection.createIndex({ role: 1 });
    await User.collection.createIndex({ departamento: 1 });

    // √çndices para Produto
    const Produto = require("../models/Produto");
    await Produto.collection.createIndex({ codigo: 1 }, { unique: true });
    await Produto.collection.createIndex({ codigoTotvs: 1 });
    await Produto.collection.createIndex({ nome: "text", descricao: "text" });
    await Produto.collection.createIndex({ categoria: 1 });
    await Produto.collection.createIndex({ genero: 1 });
    await Produto.collection.createIndex({ ativo: 1 });

    // √çndices para Estoque
    const Estoque = require("../models/Estoque");
    await Estoque.collection.createIndex(
      { produto: 1, "cor.codigo": 1, tamanho: 1 },
      { unique: true }
    );
    await Estoque.collection.createIndex({ "localizacao.deposito": 1 });
    await Estoque.collection.createIndex({ status: 1 });
    await Estoque.collection.createIndex({ "quantidade.disponivel": 1 });
    await Estoque.collection.createIndex({ "alertas.estoqueBaixo": 1 });

    console.log("‚úÖ √çndices criados com sucesso");
  } catch (error) {
    console.error("‚ùå Erro ao criar √≠ndices:", error.message);
  }
}

async function main() {
  console.log(
    "üöÄ Configura√ß√£o inicial do Sistema de Controle de Estoque CROSBY"
  );
  console.log(
    "================================================================\n"
  );

  // Verificar configura√ß√µes
  const envOk = await checkEnvironment();
  if (!envOk) {
    console.log("\n‚ùå Configure as vari√°veis de ambiente antes de continuar");
    process.exit(1);
  }

  // Conectar ao banco
  await connectDB();

  // Criar √≠ndices
  await createIndexes();

  // Criar usu√°rio administrador
  const createAdmin = await question(
    "\nDeseja criar um usu√°rio administrador? (s/n): "
  );
  if (createAdmin.toLowerCase() === "s") {
    await createAdminUser();
  }

  // Testar conex√£o TOTVS
  const testTotvs = await question(
    "\nDeseja testar a conex√£o com TOTVS? (s/n): "
  );
  if (testTotvs.toLowerCase() === "s") {
    await testTotvsConnection();
  }

  console.log("\nüéâ Configura√ß√£o inicial conclu√≠da!");
  console.log("\nPr√≥ximos passos:");
  console.log("1. Inicie o servidor: npm run dev");
  console.log("2. Acesse: http://localhost:3000");
  console.log("3. Fa√ßa login com o usu√°rio administrador criado");
  console.log("4. Configure a sincroniza√ß√£o com TOTVS");

  rl.close();
  process.exit(0);
}

// Executar se chamado diretamente
if (require.main === module) {
  main().catch((error) => {
    console.error("‚ùå Erro na configura√ß√£o:", error);
    process.exit(1);
  });
}

module.exports = { main };
